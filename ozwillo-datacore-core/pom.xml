<project xmlns="http://maven.apache.org/POM/4.0.0" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
	http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
   
  <parent>
   <groupId>org.ozwillo.datacore</groupId>
   <artifactId>ozwillo-datacore</artifactId>
    <version>1.13</version>
    <relativePath>..</relativePath>
  </parent>
  
	<artifactId>ozwillo-datacore-core</artifactId>
	<name>Ozwillo Datacore Core</name>


	<dependencies>

      <!-- Datacore Common -->
      <dependency>
        <groupId>org.ozwillo.datacore</groupId>
        <artifactId>ozwillo-datacore-common</artifactId><!-- brings DCRequestContext -->
      </dependency>
      
      <!-- logging : using slf4j / log4j 
      slf4j/logback (log4j successor) more recent, but log4j backend easier with spring & for single conf file
      why http://stackoverflow.com/questions/2533614/what-are-the-latest-options-in-java-logging-frameworks
      how http://stackoverflow.com/questions/4311026/how-to-get-slf4j-hello-world-working-with-log4j
      LATER slf4j also for spring (using jcl-over-slf4j) http://spring.io/blog/2009/12/04/logging-dependencies-in-spring/
      LATER2 logback http://www.lordofthejars.com/2012/04/hey-teachers-leave-them-kids-alone-all.html
      LATER3 mongo-backed logging ?? https://github.com/deftlabs/mongo-java-logging
      -->
      <dependency>
         <groupId>org.slf4j</groupId>
         <artifactId>slf4j-api</artifactId>
      </dependency>
      <dependency>
         <groupId>org.slf4j</groupId>
         <artifactId>slf4j-log4j12</artifactId>
      </dependency>

		<!-- Spring framework -->
      <dependency>
         <groupId>org.springframework</groupId>
         <artifactId>spring-core</artifactId>
      </dependency>
      <dependency>
         <groupId>org.springframework</groupId>
         <artifactId>spring-context</artifactId>
      </dependency>
      <!-- to support @Configuration see
      http://www.mkyong.com/spring3/cglib-is-required-to-process-configuration-classes/ -->
      <dependency>
         <groupId>cglib</groupId>
         <artifactId>cglib</artifactId>
      </dependency>
      
      <!-- Spring security (required for annotations) -->
      <dependency>
         <groupId>org.springframework.security</groupId>
         <artifactId>spring-security-core</artifactId>
      </dependency>
      <dependency>
         <groupId>org.springframework.security.oauth</groupId>
         <artifactId>spring-security-oauth2</artifactId>
      </dependency>
      
      <dependency>
         <groupId>jakarta.annotation</groupId>
         <artifactId>jakarta.annotation-api</artifactId>
      </dependency><!-- dependency>
         <groupId>org.apache.geronimo.specs</groupId>
         <artifactId>geronimo-annotation_1.2_spec</artifactId>
      </dependency --><!-- in Java 11 required to bring javax.annotation for @PostConstruct -->
     
 
		<!-- mongodb java driver (optional in Spring Data Mongo) -->
		<dependency>
			<groupId>org.mongodb</groupId>
			<artifactId>mongodb-driver-sync</artifactId>
		</dependency>
		<!-- Spring data mongodb -->
		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-mongodb</artifactId>
		</dependency>
 		<!-- for spring data auditing and more -->
		<dependency>
		    <groupId>joda-time</groupId>
		    <artifactId>joda-time</artifactId>
		</dependency>
      
      <!-- spring on neo4j  NO ELSE ITS scala-library 2.9.1-1 CONFLICTS WITH SWAGGER's 2.10.0 -->
      <!-- dependency>
         <groupId>org.springframework</groupId>
         <artifactId>spring-tx</artifactId>
         <version>${spring.version}</version>
      </dependency>
      <!- TODO ? ->
      <dependency>
         <groupId>org.springframework</groupId>
         <artifactId>spring-expression</artifactId>
         <version>${spring.version}</version>
      </dependency>
      <dependency>
         <groupId>javax.validation</groupId>
         <artifactId>validation-api</artifactId>
         <version>${validation-api.version}</version>
      </dependency>
      <dependency>
         <groupId>org.springframework.data</groupId>
         <artifactId>spring-data-neo4j</artifactId>
      <version>${spring-data-neo4j.version}</version>
      </dependency>
      <!- neo4j (depended on by spring) ->
      <dependency>
        <groupId>org.neo4j</groupId>
        <artifactId>neo4j</artifactId>
        <version>${neo4j.version}</version>
      </dependency -->
      
      <!-- else ValidationException: Unable to create a Configuration, because no Bean Validation provider could be found. Add a provider like Hibernate Validator (RI) to your classpath.
      see http://goldenpackagebyanuj.blogspot.fr/2013/05/validationException-no-Bean-Validation-provider-could-be-found.html -->
      <dependency>
         <groupId>org.hibernate.validator</groupId>
         <artifactId>hibernate-validator</artifactId>
      </dependency>
      
      <!-- for ImmutableMap/List(.Builder), also used by MITRE OpenIdConnect & Swagger -->
      <dependency>
         <groupId>com.google.guava</groupId>
         <artifactId>guava</artifactId>
      </dependency>
      
      <!-- tests -->
      <dependency>
         <groupId>org.springframework</groupId>
         <artifactId>spring-test</artifactId>
         <scope>test</scope>
      </dependency>
      
	</dependencies>
 
</project>
