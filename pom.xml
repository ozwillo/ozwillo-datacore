<?xml version="1.0" encoding="UTF-8"?>
<!--
Ozwillo Datacore
Copyright (c) 2013-2015 Open Wide
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.
You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
Contact : http://www.ozwillo.com/ ozwillo-talk@googlegroups.com
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.ozwillo.datacore</groupId>
	<artifactId>ozwillo-datacore</artifactId>
	<name>Ozwillo Datacore</name>
	<description>Ozwillo Datacore is a collaborative Open Linked Data Cloud platform.</description>
	<version>1.12.0.RELEASE</version>
	<packaging>pom</packaging>

	<!-- =================== -->
	<!-- Project information -->
	<!-- =================== -->
	<licenses>
		<license>
			<name>The GNU Lesser General Public License, Version 3</name>
			<url>http://www.gnu.org/licenses/lgpl-3.0.txt</url>
		</license>
	</licenses>

	<organization>
		<name>Ozwillo Consortium</name>
		<url>http://www.ozwillo.com/</url>
	</organization>

	<url>http://www.ozwillo.com/</url>
	<scm>
		<connection>scm:git:git://github.com/ozwillo/ozwillo-datacore.git</connection>
		<developerConnection>scm:git:git@github.com:ozwillo/ozwillo-datacore.git</developerConnection>
		<url>https://github.com/ozwillo/ozwillo-datacore</url>
	</scm>

	<mailingLists>
		<mailingList>
			<name>Ozwillo Announcements</name>
			<archive>https://groups.google.com/forum/?fromgroups#!forum/ozwillo-core</archive>
			<post>ozwillo-core@googlegroups.com</post>
		</mailingList>
		<mailingList>
			<name>Ozwillo Discussion</name>
			<archive>https://groups.google.com/forum/?fromgroups#!forum/ozwillo-talk</archive>
			<post>ozwillo-talk@googlegroups.com</post>
		</mailingList>
		<!-- mailingList>
			<name>Ozwillo Datacore developers mailing-list</name>
			<archive>https://groups.google.com/forum/?fromgroups#!forum/ozwillo-datacore-dev</archive>
			<post>ozwillo-datacore-dev@googlegroups.com</post>
		</mailingList -->
	</mailingLists>
	<issueManagement>
		<url>https://github.com/ozwillo/ozwillo-datacore/issues</url>
		<system>GitHub Issues</system>
	</issueManagement>
	<ciManagement>
		<!-- Missing -->
	</ciManagement>

	<developers>
		<developer>
			<id>mdutoo</id>
			<name>Marc Dutoo</name>
			<email>marc.dutoo@openwide.fr</email>
			<organization>Open Wide</organization>
			<organizationUrl>http://www.openwide.fr</organizationUrl>
			<roles>
				<role>Architect</role>
				<role>Developer</role>
			</roles>
		</developer>
      <developer>
         <id>spdy</id>
         <name>Aur√©lien Giraudon</name>
         <email>aurelien.giraudon@openwide.fr</email>
         <organization>Open Wide</organization>
         <organizationUrl>http://www.openwide.fr</organizationUrl>
         <roles>
            <role>Architect</role>
            <role>Developer</role>
         </roles>
      </developer>
      <developer>
         <id>vvision</id>
         <name>Victor Voisin</name>
         <email>victor.voisin@openwide.fr</email>
         <organization>Open Wide</organization>
         <organizationUrl>http://www.openwide.fr</organizationUrl>
         <roles>
            <role>Developer</role>
         </roles>
      </developer>
	</developers>

	<distributionManagement>
		<repository>
			<id>sonatype-nexus-staging</id>
			<url>https://oss.sonatype.org/service/local/staging/deploy/maven2</url>
		</repository>
		<snapshotRepository>
			<id>sonatype-nexus-snapshots</id>
			<url>https://oss.sonatype.org/content/repositories/snapshots</url>
		</snapshotRepository>
	</distributionManagement>


	<!-- ========== -->
	<!-- Properties -->
	<!-- ========== -->
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<java.version>1.8</java.version>

		<!-- testing : -->
		<junit.version>4.12</junit.version><!-- cxf3' ; 4.11 solves method execution order
			bug -->
		<jetty.version>9.4.24.v20191120</jetty.version><!-- cxf's -->


		<!-- logging -->
		<slf4j.version>1.7.25</slf4j.version>
		<log4j.version>1.2.17</log4j.version>

		<!-- spring IoC -->
		<!-- spring.version>3.2.4.RELEASE</spring.version -->
		<spring.version>5.2.3.RELEASE</spring.version><!-- brought by spring data's -->
		<cglib.version>3.2.12</cglib.version>
		<hibernate-validator.version>6.0.13.Final</hibernate-validator.version>

		<!-- spring data on mongodb -->
		<spring-data-mongodb.version>2.2.4.RELEASE</spring-data-mongodb.version>
		<mongodb.version>3.12.1</mongodb.version><!-- supports MongoDB 2.6 to 4.2 -->
		<joda-time.version>2.10.1</joda-time.version><!-- from Jackson -->

		<!-- spring data on neo4j (TODO for Social Graph mock ?!?) -->
		<spring-data-neo4j.version>2.2.2.RELEASE</spring-data-neo4j.version>
		<!-- neo4j.version>1.8.1</neo4j.version --><!-- depended on by spring ; NB. 1.9.4
			not compatible, 2.0 not out yet -->
		
		<logback.version>1.2.3</logback.version>
		<validation-api.version>1.1.0.Final</validation-api.version>

		<!-- REST -->
		<jackson.version>2.10.2</jackson.version><!-- latest ; swagger's : 2.9.8, jsonld-java's : 2.3.3
			as of 201309 -->
		<cxf.version>3.3.10</cxf.version><!-- NB. 3.3.5 brings :
        spring & security 5.1.12 & 5.1.7, metrics 3.2.6 https://github.com/apache/cxf/blob/cxf-3.3.5/parent/pom.xml
        OLD : before 3.0.4 for JAXRS 2.0, 3.1.4 for metrics -->
		<metrics.version>3.2.6</metrics.version><!-- TODO 3.2.6 OLD : 3.1.2 is cxf 3.1.4's' (optional dep) version AND latest on 20151201 -->
		<ehcache.version>2.10.6</ehcache.version><!-- for client-side cache ; cxf's (& spring's) -->

        <guava.version>27.1-jre</guava.version><!-- for ImmutableMap/List(.Builder) (prefer it to Apache Commons Collections),
        also used by MITRE OpenIdConnect & Swagger (in 13.0.1, 11.0.2) -->
		<commons-lang.version>2.6</commons-lang.version><!-- for ExceptionUtils -->
		<commons-io.version>2.6</commons-io.version><!-- for IOUtils TODO used ?? -->

		<swagger.version>1.6.0</swagger.version><!-- latest 1.5+ i.e. swagger spec 2.0 (but NOT swagger 2.0 / OpenAPI 3.0) -->

        <!-- monitoring -->
        <!-- UDP is bugged in 0.2.10, rather use TCP for now -->
        <riemann-client.version>0.5.1</riemann-client.version>

        <!-- spring security & al -->
		<spring.security.version>5.2.2.RELEASE</spring.security.version>
        <spring.security.oauth2.version>2.4.0.RELEASE</spring.security.oauth2.version>
		<mitre-openid-client.version>1.3.3</mitre-openid-client.version><!-- for client & test -->

        <!-- JSON-LD (for RDF facade) -->
        <jsonld-java.version>0.4.1</jsonld-java.version><!-- no later than 0.4.1 else no -jena so no turtle format support -->
        <httpclient.version>4.5.3</httpclient.version><!-- rather same as openid-connect-common 1.1.0's -->
        <!-- jackson.version>2.3.3</jackson.version><!- would conflict ->
        <sesame.version>2.7.11</sesame.version>
        <slf4j.version>1.7.7</slf4j.version -><!- would conflict -->

        <!-- import, for tests : -->
        <opencsv.version>2.3</opencsv.version>

		<!-- mockito, for better unit tests -->
		<mockito.version>2.28.1</mockito.version>
	</properties>

	<!-- ======= -->
	<!-- Modules -->
	<!-- ======= -->
	<modules>
		<!-- module>ozwillo-datacore-test</module -->
		<!-- module>ozwillo-datacore-samples</module -->
		<module>ozwillo-datacore-common</module>
		<module>ozwillo-datacore-core</module><!-- TODO -api (PermissionDataService
			to be called by Social Graph, or in -rest ?), -impl ? -->
		<module>ozwillo-datacore-rest-api</module>
		<module>ozwillo-datacore-rest-cxf</module>
		<module>ozwillo-datacore-rest-server</module>
		<module>ozwillo-datacore-web</module>
		<!-- TODO mocks ex. Social Graph ? -->
		<!-- TODO features ex. approval workflow, RDF/SPARQL, backend UI ?? -->
      <module>ozwillo-datacore-kernel-client</module><!-- TODO re-enable tests with atol demo
      WITHIN integration tests and once auth is OK again -->
      <module>ozwillo-datacore-monitoring</module>
  </modules>

	<!-- ============ -->
	<!-- Profiles -->
	<!-- ============ -->
	<profiles>
		<!-- TODO mocks, samples profiles ? -->
		<!-- TODO release profile ? -->
		<profile>
			<id>sonar</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>cobertura-maven-plugin</artifactId>
						<version>2.7</version>
						<!-- configuration>
							<check>
								<branchRate>85</branchRate>
								<lineRate>85</lineRate>
								<haltOnFailure>true</haltOnFailure>
								<totalBranchRate>85</totalBranchRate>
								<totalLineRate>85</totalLineRate>
								<packageLineRate>85</packageLineRate>
								<packageBranchRate>85</packageBranchRate>
							</check>
						</configuration -->
						<!-- see http://stackoverflow.com/questions/6931360/what-is-the-proper-way-to-use-cobertura-with-maven-3-0-2 -->
						<!-- executions>
							<execution>
								<id>clean</id>
								<phase>clean</phase>
								<goals>
									<goal>clean</goal>
								</goals>
							</execution>
							<execution>
								<id>instrument</id>
								<phase>process-classes</phase>
								<goals>
									<goal>instrument</goal>
								</goals>
							</execution -->
							<!-- No "check" in verify phase, else error : Unable to prepare instrumentation
								directory. source and destination are the same directory. -->
							<!-- NB. instrument and check must never be in the same execution because
								one depends on the other see http://blog.bielu.com/2012/01/errata-to-maven2-maven3-migration.html -->
							<!-- No "cobertura" in package phase, because it must be done in reporting
								element instead -->
						<!-- /executions -->
					</plugin>
				</plugins>
			</build>

			<reporting>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>cobertura-maven-plugin</artifactId>
						<version>2.7</version>
						<!--<configuration>-->
							<!--<formats>-->
								<!--<format>html</format>-->
								<!--<format>xml</format>-->
							<!--</formats>-->
						<!--</configuration>-->
						<reportSets>
							<reportSet>
								<reports>
									<report>report-only</report>
								</reports>
							</reportSet>
						</reportSets>
					</plugin>
				</plugins>
			</reporting>

		</profile>

		<profile>
			<id>release</id>
			<build>
				<plugins>
				  <plugin>
				    <groupId>org.apache.maven.plugins</groupId>
				    <artifactId>maven-gpg-plugin</artifactId>
				    <version>1.6</version>
				    <executions>
				      <execution>
					<id>sign-artifacts</id>
					<phase>verify</phase>
					<goals>
					  <goal>sign</goal>
					</goals>
				      </execution>
				    </executions>
				    <configuration>
				      <keyname>B4235B0A</keyname><!-- Marc Dutoo -->
				    </configuration>
				  </plugin>
				  <plugin>
				    <groupId>org.apache.maven.plugins</groupId>
				    <artifactId>maven-source-plugin</artifactId>
				    <executions>
				      <execution>
					<id>attach-sources</id>
					<goals>
					  <goal>jar</goal>
					</goals>
				      </execution>
				    </executions>
				  </plugin>
				  <!--<plugin>-->
				    <!--<groupId>org.apache.maven.plugins</groupId>-->
				    <!--<artifactId>maven-javadoc-plugin</artifactId>-->
					  <!--<version>3.1.0</version>-->
				    <!--<executions>-->
				      <!--<execution>-->
					<!--<id>attach-javadocs</id>-->
					<!--<goals>-->
					  <!--<goal>jar</goal>-->
					<!--</goals>-->
				      <!--</execution>-->
				    <!--</executions>-->
				  <!--</plugin>-->
				</plugins>
			</build>
		</profile>
		<profile>
			<id>disable-java8-doclint</id><!-- else errors on ampersand, missing @param...  -->
			<activation>
				<jdk>[1.8,)</jdk>
			</activation>
			<properties>
				<additionalparam>-Xdoclint:none</additionalparam><!-- see https://stackoverflow.com/questions/22528767/how-to-work-around-the-stricter-java-8-javadoc-when-using-maven -->
			</properties>
		</profile>
	</profiles>


	<!-- ============ -->
	<!-- Dependencies -->
	<!-- ============ -->
	<dependencies>
		<!-- Testing : -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<scope>test</scope>
		</dependency --><!-- LATER mocked tests -->
	</dependencies>

	<!-- ======================== -->
	<!-- Dependencies constraints -->
	<!-- ======================== -->
	<!-- includes transitive dependencies' licenses analysis
	(done in Eclipse M2E Dependency Hierarchy analysis).
	To sum it up, encountered AGPLv3-compatible licenses are :
	- GPL, LGPL
	- Apache 2.0 license
	- MIT License
	- (new) BSD License i.e. without original advertising clause
	And encountered incompatible licenses are :
	- CPL, EPL
	- original BSD License i.e. with advertising clause
	- GPL2 with classpath Exception or CDDL 1.0 (java & javax)
	- Creative Commons Attribution 2.5
	-->
	<dependencyManagement>
		<dependencies>
			<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-javadoc-plugin -->
			<dependency>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>3.1.0</version>
			</dependency>

			<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-gpg-plugin -->
			<dependency>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-gpg-plugin</artifactId>
				<version>1.6</version>
			</dependency>

			<!-- https://mvnrepository.com/artifact/org.codehaus.mojo/cobertura-maven-plugin -->
			<dependency>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>cobertura-maven-plugin</artifactId>
				<version>2.7</version>
				<scope>test</scope>
			</dependency>
			<!-- Testing :
			- junit 4.12 (EPL 1.0 License which is incompatible with GPL BUT we are not creating
			a derivative work of it since extending junit is the normal way of using a test
			framework (TODO say it in a notice), nor providing it to (api) users since it's not used operationally)
			which depends on hamcrest-core ((new) BSD License),
			- jetty (EPL 1.0 License which is incompatible with GPL BUT we are not providing
			it to (api) users since it is only used in mvn jetty:run and in tests and
			tomcat is used operationally instead) -->
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>${junit.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-server</artifactId><!-- also brought by cxf-rt-transports-http-jetty -->
				<version>${jetty.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.mockito</groupId>
				<artifactId>mockito-core</artifactId>
				<version>${mockito.version}</version>
				<scope>test</scope>
				<exclusions>
					<exclusion>
						<groupId>org.hamcrest</groupId>
						<artifactId>hamcrest-core</artifactId>
					</exclusion>
				</exclusions>
			</dependency>

			<!-- Datacore -->
			<dependency>
				<groupId>org.ozwillo.datacore</groupId>
				<artifactId>ozwillo-datacore-samples</artifactId>
				<version>${project.version}</version>
			</dependency>
	      <dependency>
	        <groupId>org.ozwillo.datacore</groupId>
	        <artifactId>ozwillo-datacore-common</artifactId><!-- brings DCRequestContext -->
				<version>${project.version}</version>
	      </dependency>
			<dependency>
				<groupId>org.ozwillo.datacore</groupId>
				<artifactId>ozwillo-datacore-core</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>org.ozwillo.datacore</groupId>
				<artifactId>ozwillo-datacore-rest-api</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>org.ozwillo.datacore</groupId>
				<artifactId>ozwillo-datacore-rest-server</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>org.ozwillo.datacore</groupId>
				<artifactId>ozwillo-datacore-rest-cxf</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>org.ozwillo.datacore</groupId>
				<artifactId>ozwillo-datacore-api-client</artifactId>
				<version>${project.version}</version>
			</dependency>
	      <dependency>
	        <groupId>org.ozwillo.datacore</groupId>
	        <artifactId>ozwillo-datacore-kernel-client</artifactId>
	        <version>${project.version}</version>
	      </dependency>
	      <dependency>
	        <groupId>org.ozwillo.datacore</groupId>
	        <artifactId>ozwillo-datacore-monitoring</artifactId>
	        <version>${project.version}</version>
	      </dependency>

			<!-- logging : using slf4j (MIT License) facade on log4j (Apache 2.0 License) backend
			   NB. logback (log4j successor) more
				recent, but log4j backend easier with spring & for single conf file why http://stackoverflow.com/questions/2533614/what-are-the-latest-options-in-java-logging-frameworks
				how http://stackoverflow.com/questions/4311026/how-to-get-slf4j-hello-world-working-with-log4j
				LATER slf4j also for spring (using jcl-over-slf4j, also Apache 2.0 License) http://spring.io/blog/2009/12/04/logging-dependencies-in-spring/
				LATER2 logback see gru http://www.lordofthejars.com/2012/04/hey-teachers-leave-them-kids-alone-all.html
				LATER3 mongo-backed logging ?? https://github.com/deftlabs/mongo-java-logging -->
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-api</artifactId>
				<version>${slf4j.version}</version>
			</dependency>
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-log4j12</artifactId>
				<version>${slf4j.version}</version>
			</dependency>
			<dependency>
				<groupId>log4j</groupId>
				<artifactId>log4j</artifactId>
				<version>${log4j.version}</version>
			</dependency>
			<!-- LATER for logback backend instead -->
			<!-- dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>jcl-over-slf4j</artifactId>
				<version>${slf4j.version}</version>
			</dependency>
			<dependency>
				<groupId>ch.qos.logback</groupId>
				<artifactId>logback-classic</artifactId>
				<version>${logback.version}</version>
			</dependency -->

			<!-- Spring framework and deps (all Apache 2.0 License) :
			core, context (which also brings beans (!), expression, aop which brings aopalliance which is Public Domain)
			context-support (cache), test ; also web, webmvc, jdbc -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-core</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context</artifactId>
				<version>${spring.version}</version>
			</dependency>
         <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId><!-- for EHCache support classes http://stackoverflow.com/questions/13956224/spring-3-2-and-cache-abstraction-missing-ehcache-implementation -->
            <version>${spring.version}</version>
         </dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-test</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- cglib (Apache 2.0 License), depends on asm ((new) BSD License), to support spring @Configuration
         see http://www.mkyong.com/spring3/cglib-is-required-to-process-configuration-classes/ -->
			<dependency>
				<groupId>cglib</groupId>
				<artifactId>cglib</artifactId>
				<version>${cglib.version}</version>
			</dependency>
	      <!-- (Hibernate) javax.validation impl, brings jBoss' api and slf4j-api (all Apache 2.0 License)
	      else ValidationException: Unable to create a Configuration, because no Bean Validation provider could be found. Add a provider like Hibernate Validator (RI) to your classpath.
	      see http://goldenpackagebyanuj.blogspot.fr/2013/05/validationException-no-Bean-Validation-provider-could-be-found.html -->
	      <dependency>
	         <groupId>org.hibernate</groupId>
	         <artifactId>hibernate-validator</artifactId>
	         <version>${hibernate-validator.version}</version>
	      </dependency>


         <!-- Spring security (Apache 2.0 License) -->
         <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-core</artifactId>
            <version>${spring.security.version}</version>
         </dependency>
         <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-config</artifactId>
            <version>${spring.security.version}</version>
         </dependency>
         <!-- Spring security OAuth 2.0 dependencies -->
         <dependency>
            <groupId>org.springframework.security.oauth</groupId>
            <artifactId>spring-security-oauth2</artifactId>
            <version>${spring.security.oauth2.version}</version>
         </dependency>
         <!-- Spring security - forcing conflicted deps version even if not used
         see http://www.baeldung.com/spring-security-with-maven -->
         <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-beans</artifactId>
            <version>${spring.version}</version>
         </dependency>
         <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aop</artifactId>
            <version>${spring.version}</version>
         </dependency>
         <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-expression</artifactId>
            <version>${spring.version}</version>
         </dependency>
         <dependency><!-- not used (for now), brought by spring-security-oauth2 -->
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>${spring.version}</version>
         </dependency>
         <dependency><!-- not used (for now) ? -->
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-web</artifactId>
            <version>${spring.security.version}</version>
         </dependency>
         <dependency><!-- not used ? brought by spring-security-web -->
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>${spring.version}</version><!-- 3.2.5 -->
         </dependency>
         <!-- MITRE OpenId Connect Client library, for client & test (Apache 2.0 License),
         depends on :
         - spring & security & oauth (Apache 2.0 License),
         guava (Apache 2.0 License), httpclient (Apache 2.0 License), gson (Apache 2.0 License), slf4j-api (MIT License),
         EclipseLink's javax.persistence 2.0 (EPL 1.0 licensed, therefore replaced by Geronimo's Apache 2.0 licensed)
         and nimbus-jose-jwt (Apache 2.0 License) which depends on :
         - commons-codec (Apache 2.0 License), jcip-annotations (Creative Commons Attribution 2.5,
         therefore replaced by stephenc's Apache 2.0 licensed),
         json-smart (Apache 2.0 License), bcprov-jdk5on (MIT License),
         - javax.mail which depends on javax.activation (both GPL2 with classpath Exception or CDDL 1.0 licensed,
         therefore replaced by Geronimo's Apache 2.0 licensed) -->
         <dependency>
            <groupId>org.mitre</groupId>
            <artifactId>openid-connect-client</artifactId>
            <version>${mitre-openid-client.version}</version>
            <exclusions>
              <exclusion>
               <groupId>net.jcip</groupId>
               <artifactId>jcip-annotations</artifactId>
              </exclusion>
              <exclusion>
               <groupId>org.eclipse.persistence</groupId>
               <artifactId>javax.persistence</artifactId>
              </exclusion>
              <exclusion>
                <groupId>javax.mail</groupId>
                <artifactId>mail</artifactId>
              </exclusion>
            </exclusions>
         </dependency>
			<!-- javax.persistence API replacement (Apache 2.0 License), probably not used -->
			<dependency>
				<groupId>org.apache.geronimo.specs</groupId>
				<artifactId>geronimo-jpa_2.0_spec</artifactId>
				<version>1.1</version>
			</dependency>
			<!-- jcip-annotations replacement (Apache 2.0 License), not used since not using JWT yet -->
			<dependency>
				<groupId>com.github.stephenc.jcip</groupId>
				<artifactId>jcip-annotations</artifactId>
				<version>1.0-1</version>
			</dependency>
			<!-- java.mail API replacement (Apache 2.0 License), not used since not using JWT yet
			though even then probably would not be used ; TODO BEWARE misses impl ex. smtp transport
			is in another geronimo jar -->
			<dependency>
				<groupId>org.apache.geronimo.specs</groupId>
				<artifactId>geronimo-javamail_1.4_spec</artifactId>
				<version>1.7.1</version>
			</dependency>

			<!-- mongodb java driver (Apache 2.0 License) -->
			<dependency>
				<groupId>org.mongodb</groupId>
				<artifactId>mongo-java-driver</artifactId>
				<version>${mongodb.version}</version>
			</dependency>
			<!-- Spring data mongodb (Apache 2.0 License), brings deps :
			- Joda's DateTime (including in spring data auditing) (Apache 2.0 License)
			- guava (Apache 2.0 License)
			- Spring tx & -data-commons (Apache 2.0 License) -->
			<dependency>
				<groupId>org.springframework.data</groupId>
				<artifactId>spring-data-mongodb</artifactId>
				<version>${spring-data-mongodb.version}</version>
				<exclusions>
					<exclusion>
						<groupId>org.slf4j</groupId>
						<artifactId>jcl-over-slf4j</artifactId><!-- rather using slf4j-log4j12 (for now) -->
					</exclusion>
				</exclusions>
			</dependency>
			<dependency>
				<groupId>joda-time</groupId>
				<artifactId>joda-time</artifactId>
				<version>${joda-time.version}</version>
			</dependency>

			<!-- REST : -->
			<!-- Jackson JAXRS (pulls all other deps) (Apache 2.0 License) -->
			<dependency>
				<groupId>com.fasterxml.jackson.jaxrs</groupId>
				<artifactId>jackson-jaxrs-json-provider</artifactId><!-- brings JacksonJsonProvider,
					to configure in clients -->
				<version>${jackson.version}</version>
			</dependency>
			<!-- dates in jackson REST using Joda's DateTime : (not required to compile
				but DCResource can't be parsed without it) (WARNING requires also module
				conf) -->
			<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->
			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-databind</artifactId>
				<version>${jackson.version}</version>
			</dependency>
			<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core -->
			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-core</artifactId>
				<version>${jackson.version}</version>
			</dependency>

			<dependency>
				<groupId>com.fasterxml.jackson.datatype</groupId>
				<artifactId>jackson-datatype-joda</artifactId>
				<version>${jackson.version}</version>
			</dependency>
			<!-- NB. other Jackson deps : ex. for mere (JSONLD) parsing only core
				& databind -->
			<!-- Servlet API 3 (Apache 2.0 License), provided by Tomcat 7.0.96's (but Tomcat 9 would be 4.0)
                 CXF 3.3.1 supports <= 4.0, in tests jetty uses 3.1 (excluded) ; 
                 otherwise javax.servlet javax.servlet-api 3.1.0 ?? -->
			<dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>javax.servlet-api</artifactId>
                <version>3.1.0</version>
				<!-- groupId>org.jboss.spec.javax.servlet</groupId>
				<artifactId>jboss-servlet-api_3.1_spec</artifactId>
				<version>1.0.2.Final</version -->
				<scope>provided</scope><!-- provided so doesn't affect license NB. provided makes it also available in tests -->
			</dependency>
            <!-- Replacing not GPL-licensed javax libs by jakarta libs -->
            <dependency>
               <groupId>jakarta.ws.rs</groupId>
               <artifactId>jakarta.ws.rs-api</artifactId>
               <version>2.1.5</version>
            </dependency>
            <dependency>
               <groupId>jakarta.xml.ws</groupId>
               <artifactId>jakarta.xml.ws-api</artifactId><!-- not used but javax version 2.3.1 is dep of cxf-core/rt-* -->
               <version>2.3.2</version>
            </dependency>
			<!-- CXF 3 (Apache 2.0 License) :
			- core (since 3 includes api) brings deps in Apache 2.0 License : xmlschema-core, woodstox' core which brings stax2-api
			- frontend-jaxrs also brings javax.annotation 1.2 & jaxrs 2.0.1 (both GPL2 with classpath Exception or CDDL 1.0 licensed,
			therefore replaced by Geronimo's Apache 2.0 licensed) and rt-transport-http
			- rt-transport-http doesn't bring anything else -->
			<dependency>
				<groupId>org.apache.cxf</groupId>
				<artifactId>cxf-rt-core</artifactId><!-- auto brought by -rt-*
				but explicited there to centralize exclusions -->
				<version>${cxf.version}</version>
				<exclusions><!-- Java 11 : adding removed default deps using jakarta libs -->
				  <exclusion>
				    <groupId>javax.annotation</groupId>
				    <artifactId>javax.annotation-api</artifactId>
				  </exclusion>
				  <exclusion>
				    <groupId>javax.activation</groupId>
				    <artifactId>javax.activation-api</artifactId>
				  </exclusion>
				</exclusions>
			</dependency>
			<dependency>
				<groupId>org.apache.cxf</groupId>
				<artifactId>cxf-rt-frontend-jaxrs</artifactId>
				<version>${cxf.version}</version>
				<exclusions>
				  <exclusion><!-- Replacing not GPL-licensed javax libs by jakarta libs -->
				    <groupId>javax.xml.ws</groupId>
				    <artifactId>jaxws-api</artifactId>
				  </exclusion>
				  <exclusion>
				    <groupId>javax.annotation</groupId>
				    <artifactId>javax.annotation-api</artifactId>
				  </exclusion>
				  <exclusion><!-- Java 11 : adding removed default deps using jakarta libs -->
				    <groupId>javax.activation</groupId>
				    <artifactId>javax.activation-api</artifactId>
				  </exclusion>
				</exclusions>
			</dependency>
			<!-- Java 11 : adding removed default deps using jakarta libs -->
			<dependency>
				<groupId>jakarta.activation</groupId>
				<artifactId>jakarta.activation-api</artifactId>
				<version>1.2.1</version>
			</dependency>
			<dependency>
				<groupId>jakarta.annotation</groupId>
				<artifactId>jakarta.annotation-api</artifactId>
				<version>1.3.3</version>
			</dependency>
			<dependency>
				<groupId>org.apache.cxf</groupId>
				<artifactId>cxf-rt-rs-client</artifactId><!-- was before in frontend-jaxrs -->
				<version>${cxf.version}</version>
				<exclusions>
                  <exclusion><!-- Replacing not GPL-licensed javax libs by jakarta libs -->
                    <groupId>javax.xml.ws</groupId>
                    <artifactId>jaxws-api</artifactId>
                  </exclusion>
                  <!-- Java 11 : adding removed default deps using jakarta libs -->
				  <exclusion>
				    <groupId>javax.annotation</groupId>
				    <artifactId>javax.annotation-api</artifactId>
				  </exclusion>
				  <exclusion>
				    <groupId>javax.activation</groupId>
				    <artifactId>javax.activation-api</artifactId>
				  </exclusion>
				</exclusions>
			</dependency>
			<!-- would be for SOAP :
			brings cxf-wsdl which brings wsdl4j (CPL 1.0, therefore replaced by servicemix'),
			jaxb-impl (GPL2 with classpath Exception or CDDL 1.0 licensed,
			therefore replaced by Geronimo's Apache 2.0 licensed, but anyway probably not used
			since no XML representation) -->
			<!-- dependency>
				<groupId>org.apache.cxf</groupId>
				<artifactId>cxf-rt-frontend-jaxws</artifactId>
				<version>${cxf.version}</version>
				<exclusions>
				  <exclusion>
				    <groupId>wsdl4j</groupId>
				    <artifactId>wsdl4j</artifactId>
				  </exclusion>
				  <exclusion>
				    <groupId>com.sun.xml.bind</groupId>
				    <artifactId>jaxb-impl</artifactId>
				  </exclusion>
			</dependency>
			<dependency>
				<groupId>org.apache.geronimo.specs</groupId>
				<artifactId>geronimo-jaxb_2.1_spec</artifactId>
				<version>1.0</version> ?
			</dependency><!- replaces jaxb-impl, but not used since no XML representation ->
			<dependency>
				<groupId>org.apache.servicemix.bundles</groupId>
				<artifactId>org.apache.servicemix.bundles.wsdl4j</artifactId>
				<version>1.6.3_1</version> ?
			</dependency --><!-- replaces wsdl4j, needed by cxf-api else
			Caused by: java.lang.NoClassDefFoundError: javax/wsdl/extensions/ExtensibilityElement
			... at org.apache.cxf.transport.http.spring.HttpConduitBeanDefinitionParser.doParse(HttpConduitBeanDefinitionParser.java:58)
			 -->
         <!-- for metrics -->
         <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-features-metrics</artifactId>
            <version>${cxf.version}</version>
            <exclusions>
              <exclusion><!-- Replacing not GPL-licensed javax libs by jakarta libs -->
                <groupId>javax.xml.ws</groupId>
                <artifactId>jaxws-api</artifactId>
              </exclusion>
            </exclusions>
         </dependency>
         <!-- dep of cxf but only optional
         brings io.dropwizard.metrics (Apache 2.0 License) which brings slf4j-api (MIT License) -->
         <dependency>
            <groupId>io.dropwizard.metrics</groupId>
            <artifactId>metrics-core</artifactId>
            <version>${metrics.version}</version>
         </dependency>

			<!-- for packaging on tomcat -->
			<dependency>
				<groupId>org.apache.cxf</groupId>
				<artifactId>cxf-rt-transports-http</artifactId>
				<version>${cxf.version}</version>
				<exclusions>
                  <exclusion><!-- Replacing not GPL-licensed javax libs by jakarta libs -->
                    <groupId>javax.xml.ws</groupId>
                    <artifactId>jaxws-api</artifactId>
                  </exclusion>
                  <!-- Java 11 : adding removed default deps using jakarta libs -->
				  <exclusion>
				    <groupId>javax.annotation</groupId>
				    <artifactId>javax.annotation-api</artifactId>
				  </exclusion>
				  <exclusion>
				    <groupId>javax.activation</groupId>
				    <artifactId>javax.activation-api</artifactId>
				  </exclusion>
				</exclusions>
			</dependency>
			<!-- for testing on embedded jetty -->
			<dependency>
				<groupId>org.apache.cxf</groupId>
				<artifactId>cxf-rt-transports-http-jetty</artifactId>
				<version>${cxf.version}</version>
				<scope>test</scope>
				<exclusions>
                  <exclusion><!-- Replacing not GPL-licensed javax libs by jakarta libs -->
                    <groupId>javax.xml.ws</groupId>
                    <artifactId>jaxws-api</artifactId>
                  </exclusion>
                  <!-- Java 11 : adding removed default deps using jakarta libs -->
				  <exclusion>
				    <groupId>javax.annotation</groupId>
				    <artifactId>javax.annotation-api</artifactId>
				  </exclusion>
				  <exclusion>
				    <groupId>javax.activation</groupId>
				    <artifactId>javax.activation-api</artifactId>
				  </exclusion>
                  <exclusion>
                     <groupId>javax.servlet</groupId>
                     <artifactId>javax.servlet-api</artifactId>
                  </exclusion>
				</exclusions>
			</dependency>
			<!-- for tests (OR LATER local consumption between micro services ?) -->
			<dependency>
				<groupId>org.apache.cxf</groupId>
				<artifactId>cxf-rt-transports-local</artifactId>
				<version>${cxf.version}</version>
				<!-- scope>test</scope --><!-- NB. would work with it -->
				<exclusions>
                  <exclusion><!-- Replacing not GPL-licensed javax libs by jakarta libs -->
                    <groupId>javax.xml.ws</groupId>
                    <artifactId>jaxws-api</artifactId>
                  </exclusion>
                  <!-- Java 11 : adding removed default deps using jakarta libs -->
				  <exclusion>
				    <groupId>javax.annotation</groupId>
				    <artifactId>javax.annotation-api</artifactId>
				  </exclusion>
				  <exclusion>
				    <groupId>javax.activation</groupId>
				    <artifactId>javax.activation-api</artifactId>
				  </exclusion>
				</exclusions>
			</dependency>
			<!-- for async BUT ONLY ON JETTY -->
			<!-- dependency>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-continuation</artifactId>
				<version>${jetty.version}</version>
				<scope>test</scope>
			</dependency -->

			<!-- EHCache, for client-side cache (Apache 2.0 License) -->
			<dependency>
				<groupId>net.sf.ehcache.internal</groupId>
				<artifactId>ehcache-core</artifactId>
				<version>${ehcache.version}</version>
				<!-- groupId>net.sf.ehcache</groupId>
				<artifactId>ehcache</artifactId>
				<type>pom</type --><!-- NO worked in 2.6.0 but not in 2.7.4 anymore because no more dependencies
					to ehcache-core etc. (but in 2.9 works again !) would probably work without
					type=pom but brings in too much stuff (hibernate, terracotta...) -->
			</dependency>

         <!-- for ImmutableMap/List(.Builder), also used by MITRE OpenIdConnect & Swagger (Apache 2.0 License) -->
         <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>${guava.version}</version>
         </dependency>
			<!-- for ExceptionUtils (Apache 2.0 License) -->
			<dependency>
				<groupId>commons-lang</groupId>
				<artifactId>commons-lang</artifactId>
				<version>${commons-lang.version}</version>
			</dependency>
			<!-- for IOUtils TODO used ?? (Apache 2.0 License) -->
			<dependency>
				<groupId>commons-io</groupId>
				<artifactId>commons-io</artifactId>
				<version>${commons-io.version}</version>
			</dependency>

			<!-- swagger, for apidoc
			 swagger-jaxrs (Apache 2.0 License) depends on :
			 * scala-library 2.10 (BSD-like that is GPL3 compatible, see https://typesafe.com/legal/licenses )
			 * jsr311-api i.e. JAXRS 1 (CDDL License, therefore replaced by geronimo's Apache 2.0-licensed JAXRS 2,
			 which is backwards compatible with JAXRS 1)
			 * reflections ((new) BSD License), which depends on
			    * guava (Apache 2.0 License)
			    * Javassist 3.18 (Apache 2.0 License ; NB. also licensed under LGPL2.1
			 and MPL 1.1 (original license) which would also be compatible with AGPL3 as MPL 2.0 under section 6.1)
			    * findbugs annotations (LGPL) links to http://www.gnu.org/licenses/lgpl.html
			 * swagger-core, which also depends on
			    * scala-reflect in addition to -library (BSD-like that is GPL3 compatible, see https://typesafe.com/legal/licenses )
			    * a lot of jackson (mostly Apache 2.0 License)
			    * swagger-annotations (Apache 2.0 License)
			    * including jackson-module-scala (Apache 2.0 License), which depends on
			       * a lot of jackson itself (Apache 2.0 License)
			       * guava (Apache 2.0 License)
			       * jsr305 Annotations for Findbugs (Apache 2.0 License)
			       * paranamer ((new) BSD License https://github.com/paul-hammant/paranamer/blob/master/LICENSE.txt )
			    * json4s-jackson (Apache 2.0 License), which also depends on jackson-databind (Apache 2.0 License)
			    * json4s-ext (Apache 2.0 License), which also depends on joda-time and -convert (Apache 2.0 License)
			    * json4s-native (Apache 2.0 License), which depends on scala-library (again) and json4s-core,
			    which also depends on json4s-ast paranamer (again) and scalap (BSD-like that is GPL3 compatible,
			    see https://typesafe.com/legal/licenses ) -->
			<!-- https://mvnrepository.com/artifact/io.swagger/swagger-jaxrs -->
			<dependency>
				<groupId>io.swagger</groupId>
				<artifactId>swagger-jaxrs</artifactId>
				<version>${swagger.version}</version>
				<exclusions>
					<exclusion>
						<groupId>javax.ws.rs</groupId>
						<artifactId>jsr311-api</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
           <dependency>
              <groupId>io.swagger</groupId>
              <artifactId>swagger-core</artifactId>
              <exclusions>
                 <exclusion>
                    <groupId>javax.validation</groupId>
                    <artifactId>validation-api</artifactId><!-- else 1.1.0 -->
                 </exclusion>
              </exclusions>
           </dependency>

			<!-- https://mvnrepository.com/artifact/io.swagger/swagger-annotations -->
			<dependency>
				<groupId>io.swagger</groupId>
				<artifactId>swagger-annotations</artifactId>
				<version>${swagger.version}</version>
			</dependency>

			<!-- for packaging as webapp (Apache 2.0 License) TODO dev webapp (in -web project) ? -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-web</artifactId>
				<version>${spring.version}</version>
			</dependency>

			<!-- to push data to Riemann (Apache 2.0 License), brings deps :
			protbuf-java ((new) BSD license), netty (Apache 2.0 License),
			CodaHale com.yammer.metrics (Apache 2.0 License) which brings slf4j-api (MIT License) -->
			<dependency>
				<groupId>io.riemann</groupId>
				<artifactId>riemann-java-client</artifactId>
				<version>${riemann-client.version}</version>
            <exclusions>
               <exclusion>
                  <groupId>com.codahale.metrics</groupId>
                  <artifactId>metrics-core</artifactId>
                  <!-- would be 3.0.1 in conflict with io.dropwizard.metrics:metric-core:3.1.2
                  brought by cxf which still has codahale packages
                  but leaving com.yammer.metrics:metrics-core:2.1.2 which riemann strangely also brings -->
               </exclusion>
            </exclusions>
			</dependency>

         <!-- JSON-LD facade ((new) BSD License) and deps (all Apache 2.0 License) : -->
         <dependency>
            <groupId>com.github.jsonld-java</groupId>
            <artifactId>jsonld-java</artifactId>
            <version>${jsonld-java.version}</version>
            <exclusions>
               <!-- exclude its older jackson : -->
               <exclusion>
                  <groupId>com.fasterxml.jackson.core</groupId>
                  <artifactId>jackson-core</artifactId>
               </exclusion>
               <exclusion>
                  <groupId>com.fasterxml.jackson.core</groupId>
                  <artifactId>jackson-databind</artifactId>
               </exclusion>
            </exclusions>
         </dependency>
         <!-- dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
         </dependency>
         <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId><!- brought by rest-client ->
         </dependency>
         <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
         </dependency -->
         <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId><!-- also brought by openid -->
            <version>${httpclient.version}</version>
                <exclusions>
                    <exclusion>
                        <groupId>commons-logging</groupId>
                        <artifactId>commons-logging</artifactId>
                    </exclusion>
                </exclusions>
         </dependency>
         <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient-cache</artifactId>
            <version>${httpclient.version}</version>
                <exclusions>
                    <exclusion>
                        <groupId>commons-logging</groupId>
                        <artifactId>commons-logging</artifactId>
                    </exclusion>
                </exclusions>
         </dependency>

         <!-- import, for samples & tests (Apache 2.0 License) : -->
         <dependency>
            <groupId>net.sf.opencsv</groupId>
            <artifactId>opencsv</artifactId>
            <version>${opencsv.version}</version>
         </dependency>

		</dependencies>

		<!--
		and on JS UI side :
		(though APIs don't depend on it, so JS UI could not be Open Sourced or using another license)
		PapaParse, moment.js, hashids : MIT License
		Swagger UI, swagger.js : Apache 2.0 License
		jQuery, handlebars, underscore, backbone : MIT License
		highlight.js : (new) BSD License https://github.com/isagalaev/highlight.js/blob/master/LICENSE
		-->
	</dependencyManagement>

	<!-- ======= -->
	<!-- Plugins -->
	<!-- ======= -->
	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
				</configuration>
			</plugin>
			<!-- plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.2.1</version>
			</plugin -->

			<!-- TODO or in release profile ? -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>2.2.1</version>
				<executions>
					<execution>
						<id>attach-sources</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- TODO in release profile -->
			<!-- plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<executions>
					<execution>
						<id>attach-javadocs</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin -->


			<!-- plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-eclipse-plugin</artifactId>
				<version>2.9</version>
				<configuration>
					<downloadSources>true</downloadSources>
					<downloadJavadocs>true</downloadJavadocs>
				</configuration>
			</plugin -->

		</plugins>

		<!-- ================= -->
		<!-- Plugin management -->
		<!-- ================= -->
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.1</version>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<!-- ============ -->
	<!-- Repositories -->
	<!-- ============ -->
	<repositories>
		<!-- repository>
			<id>ozwillo-datacore-local-libs</id>
			<name>ozwillo-datacore local project libraries</name>
			<url>file://${project.basedir}/lib</url>
			<layout>default</layout> 
		</repository --><!-- ozwillo-datacore-core/lib -->

       <!-- Riemann Java client -->
	    <repository>
         <id>clojars.org</id>
         <url>http://clojars.org/repo</url>
       </repository>
	</repositories>
	<pluginRepositories>
	</pluginRepositories>

</project>
