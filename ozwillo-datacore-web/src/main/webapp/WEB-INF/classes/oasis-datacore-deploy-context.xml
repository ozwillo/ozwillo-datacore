<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:p="http://www.springframework.org/schema/p"
      xmlns:context="http://www.springframework.org/schema/context"
      xmlns:mongo="http://www.springframework.org/schema/data/mongo"
      xmlns:jaxrs="http://cxf.apache.org/jaxrs"
      xmlns:jaxrsc="http://cxf.apache.org/jaxrs-client"
      xmlns:cxf="http://cxf.apache.org/core"
      xmlns:http-conf="http://cxf.apache.org/transports/http/configuration"
      xmlns:http-sec="http://cxf.apache.org/configuration/security"
      xmlns:httpj="http://cxf.apache.org/transports/http-jetty/configuration"
		xmlns:security="http://www.springframework.org/schema/security"
		xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
      xsi:schemaLocation=
      "http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context.xsd
      http://www.springframework.org/schema/data/mongo
      http://www.springframework.org/schema/data/mongo/spring-mongo-1.5.xsd
      http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd
      http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
      http://cxf.apache.org/jaxrs-client http://cxf.apache.org/schemas/jaxrs-client.xsd
      http://cxf.apache.org/transports/http/configuration http://cxf.apache.org/schemas/configuration/http-conf.xsd
      http://cxf.apache.org/configuration/security http://cxf.apache.org/schemas/configuration/security.xsd
      http://cxf.apache.org/transports/http-jetty/configuration http://cxf.apache.org/schemas/configuration/http-jetty.xsd
      http://www.springframework.org/schema/security
      http://www.springframework.org/schema/security/spring-security.xsd
      http://www.springframework.org/schema/security/oauth2
      http://www.springframework.org/schema/security/spring-security-oauth2.xsd">
      
   <!-- default & overriding some properties (BEFORE import to take precedence over imported properties)
   (overriding ones are at end of comma-separated location)
   Lowest order takes precedence, here -1 to allow ex. to be overriden by test at -2, see
   http://stackoverflow.com/questions/11645360/overriding-properties-in-spring-3-1-with-a-local-properties-file
   However this doesn't work for -deploy*.properties, which has to be put instead in the same
   property placeholder as -server.properties instead and after it to work.
   Moreover without a first * after classpath (for jars ?) * doesn't work !
   See also http://www.baeldung.com/2012/02/06/properties-with-spring/ -->
   <context:property-placeholder location="classpath:oasis-datacore-rest-api.properties,classpath:oasis-datacore-rest-server.properties,classpath*:oasis-datacore-deploy*.properties"
      order="-1" ignore-unresolvable="true"/><!-- so defaults to importing PropertyPlaceholder/*Resolver -->
   
   <import resource="classpath:oasis-datacore-core-context.xml" />
   
   <!-- reusing client for init of samples : -->
   <import resource="classpath:oasis-datacore-rest-client-context.xml" /><!-- MUST BE BEFORE rest-server
   else Could not autowire field: private org.oasis.datacore.rest.client.DatacoreClientApi
   org.oasis.datacore.rest.client.DatacoreApiCachedClientImpl.delegate; nested exception is
   org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean -->
   <!-- Client for AuditLog API -->
   <import resource="classpath:oasis-datacore-kernel-client-context.xml" />
   <!-- Monitoring with Riemann -->
   <import resource="classpath:oasis-datacore-monitoring-context.xml" />
   
   <import resource="classpath:oasis-datacore-security-permissions-context.xml" />
   <import resource="classpath:oasis-datacore-security-oauth2-context.xml" />
   <import resource="classpath:oasis-datacore-security-mock-context.xml" />
   <import resource="classpath:oasis-datacore-security-web-devmode-context.xml" /><!-- DEVMODE ONLY -->
   <import resource="classpath:oasis-datacore-rest-server-context.xml" />
   <import resource="classpath:oasis-datacore-swagger-context.xml" />
   
   
   
   <!-- PUT HERE YOUR OVERRIDES that can't go as mere props in properties file
   or write alternative versions of above files and import them instead -->

   <!-- MONGODB OVERRIDES -->
   <!-- Default mongo bean name is 'mongo'
   NB. most of the mongo conf is done on client side !
   NB. no socket timeout because would NOT stop the query on the mongo server see #23 -->
   <!-- default : -->
   <!-- mongo:mongo id="mongo" host="${oasis.datacore.mongodb.host}" port="${oasis.datacore.mongodb.port}" >
      <mongo:options 
         connections-per-host="100"
         threads-allowed-to-block-for-connection-multiplier="4"
      / -->
      <!-- suppl options : -->
      <!-- mongo:options
            write-number="1"
            write-timeout="0"
            write-fsync="false"
            / -->
            <!-- connections-per-host="8"
            threads-allowed-to-block-for-connection-multiplier="4"
            connect-timeout="1000"
            max-wait-time="1500}"
            auto-connect-retry="true"
            socket-keep-alive="true"
            socket-timeout="1500"
            slave-ok="true"
            write-fsync="true" --><!-- FSYNCED -->
   <!-- /mongo:mongo -->
   <!-- replica set : -->
   <!-- mongo:mongo id="mongo" replica-set="${oasis.datacore.mongodb.replsetMembers}"/ -->
   
   <!-- CLIENT OVERRIDES -->
   
   <!-- SERVER OVERRIDES -->
   <!-- server CXF Bus
   All conf (features, properties, interceptors) is rather done on endpoints
   to avoid them being overriden by another Bus imported from another project or in test. 
   But if it is required, make sure it overrides the -client's if used together,
   by importing it after the client's -->
   <!-- cxf:bus>
      <cxf:features>
      </cxf:features>
      <cxf:properties>
      </cxf:properties>
   </cxf:bus -->
   
   <!-- CLIENT & SERVER OVERRIDES -->
   <http-conf:conduit name="*.http-conduit">
      <!-- client-side : -->
      <!-- timeout : -->
      <http-conf:client ReceiveTimeout="${datacoreApiClient.responseTimeout}"
         ConnectionTimeout="${datacoreApiClient.connectionTimeout}" />
      <!-- proxy : -->
      <!-- http-conf:client ProxyServer="localhost" ProxyServerPort="8082" ProxyServerType="HTTP" / -->
      
      <!-- server-side : -->
      <!-- use SNI-capable default hostname verifier instead of CXF' :
      see http://cxf.apache.org/docs/tls-configuration.html#TLSConfiguration-ClientTLSParameters
      http://stackoverflow.com/questions/15008647/cxf-tlsclientparameters-setdisablecncheck-true-does-not-work -->
	   <http-conf:tlsClientParameters useHttpsURLConnectionDefaultHostnameVerifier="true"
	         useHttpsURLConnectionDefaultSslSocketFactory="true" />
	</http-conf:conduit>
   
</beans>
