<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:p="http://www.springframework.org/schema/p"
      xmlns:context="http://www.springframework.org/schema/context"
      xmlns:jaxrs="http://cxf.apache.org/jaxrs"
      xmlns:jaxrsc="http://cxf.apache.org/jaxrs-client"
      xmlns:cxf="http://cxf.apache.org/core"
      xmlns:http-conf="http://cxf.apache.org/transports/http/configuration"
      xmlns:cache="http://www.springframework.org/schema/cache"
      xsi:schemaLocation=
      "http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context.xsd
      http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd
      http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
      http://cxf.apache.org/jaxrs-client http://cxf.apache.org/schemas/jaxrs-client.xsd
      http://cxf.apache.org/transports/http/configuration http://cxf.apache.org/schemas/configuration/http-conf.xsd
      http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.2.xsd">

   <import resource="classpath:oasis-datacore-common-context.xml" />
   
   <import resource="classpath:META-INF/cxf/cxf.xml" />
   <!-- import resource="classpath:META-INF/cxf/cxf-extension-http-jetty.xml"/ -->
   <!-- would be for test server but NO : OldSpringSupport [WARN] Import of META-INF/cxf/cxf-extension-http-jetty.xml has been deprecated and is unnecessary-->

   <!-- default properties -->
   <context:property-placeholder location="classpath:oasis-datacore-rest-client.properties"
      order="-1" ignore-unresolvable="true"/><!-- to let it default to importing PropertyPlaceholder/*Resolver -->

   <!-- client-side cache
   allowing to plug in your own caches
   see http://stackoverflow.com/questions/8658789/using-spring-cache-annotation-in-multiple-modules -->
   <cache:annotation-driven cache-manager="cacheManager"/><!-- (default) -->
   <bean id="cacheManager" class="org.springframework.cache.support.CompositeCacheManager">
      <property name="cacheManagers">
         <array>
            <ref bean="datacore.client.cacheManager" />
            <!-- IF AS A USER OF THE DATACORE CLIENT LIBRARY YOU HAVE YOUR OWN CACHES,
            just put them there in your own copy / override of this (composite) cacheManager bean -->
         </array>
      </property>
      <property name="fallbackToNoOpCache" value="false" /><!-- else could hide problems -->
   </bean>
   <bean id="datacore.client.cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager" 
        p:cacheManager-ref="datacore.client.ehcache"/>
   <bean id="datacore.client.ehcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" 
        p:configLocation="classpath:datacore-client-ehcache.xml" /><!-- NOT p:shared="true"
        else one ehcache conf overrides the others (plus must be named)
        see http://stackoverflow.com/questions/10013288/another-unnamed-cachemanager-already-exists-in-the-same-vm-ehcache-2-5
        and if not classpath: fails with Could not open ServletContext resource [/ehcache.xml] -->
   <!-- making the DCResource cache available for auto injection in cached client wrapper -->
   <bean id="datacore.rest.client.cache.rest.api.DCResource" factory-bean="datacore.client.cacheManager" factory-method="getCache">
      <constructor-arg><value>org.oasis.datacore.rest.api.DCResource</value></constructor-arg>
   </bean>

   <context:component-scan base-package="org.oasis.datacore.rest.api" /><!-- for caching & context -->
   <!-- context:component-scan base-package="org.oasis.datacore.rest.client" / -->
   <!-- else can't autowire client delegate because not yet created from xml -->
   <context:annotation-config /><!-- actually auto enabled by previous line -->
   
   <context:component-scan base-package="org.oasis.datacore.rest.api.util"/>
   
   <context:component-scan base-package="org.oasis.datacore.rest.server.cxf"/><!--  for DatacoreCxfJaxrsApiProvider -->
   
   <!-- Json-ld Provider :
   client-side, with its own objectMapper so that it doesn't depend on the server-->
   <bean id="datacoreApi.JsonLdJavaRdfProvider" class="org.oasis.datacore.rest.api.util.JsonLdJavaRdfProvider">
      <property name="objectMapper"><bean class="org.oasis.datacore.rest.api.binding.DatacoreObjectMapper"/></property>
   </bean>

   <!-- Client sample CXF Bus
   All conf (features, properties, interceptors) is rather done on endpoints
   to avoid them being overriden by another Bus imported from another project or in test. 
   But if it is required, make sure it overrides the -client's if used together,
   by importing it after the client's -->
   <cxf:bus>
      <cxf:features>
      </cxf:features>
      <cxf:properties>
      </cxf:properties>
   </cxf:bus>

   <!-- client-side default conduit conf :
   NB. on server-side, must be merged with server's default conduit conf in *-deploy-context.xml -->
   <http-conf:conduit name="*.http-conduit">
      <http-conf:client ReceiveTimeout="${datacoreApiClient.responseTimeout}"
         ConnectionTimeout="${datacoreApiClient.connectionTimeout}" />
      <!-- http-conf:client ProxyServer="localhost" ProxyServerPort="8082" ProxyServerType="HTTP" / -->
   </http-conf:conduit>

   <!-- Spring configuration for Datacore API CXF client -->
   <!-- Change the port to 8080 to use this test with real server-->
   <!-- serviceClass="org.oasis.datacore.rest.api.DatacoreApi" -->
   <jaxrsc:client id="datacoreApiClient"
         serviceClass="org.oasis.datacore.rest.client.DatacoreClientApi"
         address="${datacoreApiClient.baseUrl}"><!-- TODO auth -->
      <!-- OR rather than in annotated subinterfaces of DatacoreClientApi (which is simpler to understand),
      specify serialized media / content type here (allows more of them) :
      <jaxrsc:headers>
         <entry key="Consumes" value="application/json+ld"/>
      </jaxrsc:headers -->
      <jaxrsc:providers>
         <!-- JSON provider (Jackson's) : -->
         <bean class="com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider">
            <constructor-arg><bean class="org.oasis.datacore.rest.api.binding.DatacoreObjectMapper"/></constructor-arg>
         </bean>
         <!-- alt JSON provider, wrapping Jackson's by caching logic ON RESPONSE WITH BODY TO ACCESS UNMARSHALLED -->
         <!-- bean class="org.oasis.datacore.rest.client.CachedClientProviderImpl">
            <property name="delegate"><bean class="com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider"/></property>
         </bean -->
         <!-- alt to caching ETag interceptors : -->
         <!-- bean class="org.oasis.datacore.rest.client.CachedClientRequestFilter"/>
         <bean class="org.oasis.datacore.rest.client.CachedClientResponseFilter"/ -->
         <!-- bean class="org.oasis.datacore.rest.client.cxf.TextResponseExceptionMapper"/ --><!-- OBSOLETE -->
      </jaxrsc:providers>
      <!-- caching ETag interceptors (rather than whole bus) : -->
      <jaxrsc:outInterceptors>
         <bean class="org.oasis.datacore.rest.client.cxf.QueryParametersClientOutInterceptor"/>
         <bean class="org.oasis.datacore.rest.client.cxf.ETagClientOutInterceptor"/>
         <bean class="org.oasis.datacore.rest.client.cxf.ContextClientOutInterceptor"/>
         <bean class="org.oasis.datacore.rest.client.cxf.LoginClientOutInterceptor"/><!-- also provides testUser header
         but anyway it only works if server is in localauthdevmode=true -->
      </jaxrsc:outInterceptors>
      <!-- jaxrsc:inInterceptors>
         <bean class="org.oasis.datacore.rest.client.cxf.obsolete.ETagClientInInterceptor"/>
      </jaxrsc:inInterceptors -->
      <jaxrsc:features>
         <cxf:logging/>
      </jaxrsc:features>
      <jaxrsc:properties>
         <!-- Prevents logging WebApplicationException not HTTP 400 or 500 -->
         <!-- entry key="org.apache.cxf.logging.FaultListener">
            <bean class="org.oasis.datacore.rest.server.cxf.ClientServerErrorFaultListener"/>
         </entry -->
      </jaxrsc:properties>
   </jaxrsc:client>
   
   <bean id="datacoreApiCachedClient" class="org.oasis.datacore.rest.client.DatacoreApiCachedClientImpl">
      <property name="delegate"><ref bean="datacoreApiClient"/></property><!-- not necessary, autowired -->
   </bean>


   <jaxrsc:client id="datacoreClientJsonApi"
         serviceClass="org.oasis.datacore.rest.client.DatacoreClientJsonApi"
         address="${datacoreApiClient.baseUrl}"><!-- TODO auth -->
      <jaxrsc:providers>
         <!-- JSON provider (Jackson's) : -->
         <bean class="com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider">
            <constructor-arg><bean class="org.oasis.datacore.rest.api.binding.DatacoreObjectMapper"/></constructor-arg>
         </bean>
      </jaxrsc:providers>
      <jaxrsc:outInterceptors>
         <bean class="org.oasis.datacore.rest.client.cxf.QueryParametersClientOutInterceptor"/>
         <bean class="org.oasis.datacore.rest.client.cxf.ETagClientOutInterceptor"/>
         <bean class="org.oasis.datacore.rest.client.cxf.ContextClientOutInterceptor"/>
         <bean class="org.oasis.datacore.rest.client.cxf.LoginClientOutInterceptor"/><!-- also provides testUser header
         but anyway it only works if server is in localauthdevmode=true -->
      </jaxrsc:outInterceptors>
      <jaxrsc:features>
         <cxf:logging/>
      </jaxrsc:features>
      <jaxrsc:properties></jaxrsc:properties>
   </jaxrsc:client>
  
   <bean id="datacoreApiCachedJsonClient" class="org.oasis.datacore.rest.client.DatacoreApiCachedClientImpl">
      <property name="delegate"><ref bean="datacoreClientJsonApi"/></property>
   </bean>

  
   <jaxrsc:client id="datacoreClientRdfApi"
         serviceClass="org.oasis.datacore.rest.client.DatacoreClientRdfApi"
         address="${datacoreApiClient.baseUrl}"><!-- TODO auth -->
      <jaxrsc:providers>
         <ref bean="datacoreApi.JsonLdJavaRdfProvider"/>
      </jaxrsc:providers>
      <jaxrsc:outInterceptors>
         <bean class="org.oasis.datacore.rest.client.cxf.QueryParametersClientOutInterceptor"/>
         <bean class="org.oasis.datacore.rest.client.cxf.ETagClientOutInterceptor"/>
         <bean class="org.oasis.datacore.rest.client.cxf.ContextClientOutInterceptor"/>
         <bean class="org.oasis.datacore.rest.client.cxf.LoginClientOutInterceptor"/><!-- also provides testUser header
         but anyway it only works if server is in localauthdevmode=true -->
      </jaxrsc:outInterceptors>
      <jaxrsc:features>
         <cxf:logging/>
      </jaxrsc:features>
      <jaxrsc:properties></jaxrsc:properties>
   </jaxrsc:client>
   
   <bean id="datacoreApiCachedRdfClient" class="org.oasis.datacore.rest.client.DatacoreApiCachedClientImpl">
      <property name="delegate"><ref bean="datacoreClientRdfApi"/></property>
   </bean>
   
</beans>
