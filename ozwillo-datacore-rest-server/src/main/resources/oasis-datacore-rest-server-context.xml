<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:p="http://www.springframework.org/schema/p"
      xmlns:context="http://www.springframework.org/schema/context"
      xmlns:mongo="http://www.springframework.org/schema/data/mongo"
      xmlns:jaxrs="http://cxf.apache.org/jaxrs"
      xmlns:jaxrsc="http://cxf.apache.org/jaxrs-client"
      xmlns:cxf="http://cxf.apache.org/core"
      xmlns:httpj="http://cxf.apache.org/transports/http-jetty/configuration"
		xmlns:security="http://www.springframework.org/schema/security"
		xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
      xmlns:cache="http://www.springframework.org/schema/cache"
      xsi:schemaLocation=
      "http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context.xsd
      http://www.springframework.org/schema/data/mongo
      http://www.springframework.org/schema/data/mongo/spring-mongo-1.5.xsd
      http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd
      http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
      http://cxf.apache.org/jaxrs-client http://cxf.apache.org/schemas/jaxrs-client.xsd
      http://cxf.apache.org/transports/http-jetty/configuration http://cxf.apache.org/schemas/configuration/http-jetty.xsd
      http://www.springframework.org/schema/security
      http://www.springframework.org/schema/security/spring-security.xsd
      http://www.springframework.org/schema/security/oauth2
      http://www.springframework.org/schema/security/spring-security-oauth2.xsd
      http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.2.xsd">
   
   <!-- Allows to resolve spring properties placeholders (for Swagger ?) -->
   <bean id="springPlaceholderResolver" class="org.oasis.datacore.rest.server.SpringPlaceholderResolver"/>
   
   
   <!-- Server : -->
   
   <!-- server-side cache
   along with reusing client-side cache
   see http://stackoverflow.com/questions/8658789/using-spring-cache-annotation-in-multiple-modules -->
   <cache:annotation-driven cache-manager="cacheManager"/><!-- (default) -->
   <bean id="cacheManager" class="org.springframework.cache.support.CompositeCacheManager">
      <property name="cacheManagers">
         <array>
            <ref bean="datacore.server.cacheManager" />
            <ref bean="datacore.client.cacheManager" />
         </array>
      </property>
      <property name="fallbackToNoOpCache" value="false" /><!-- else could hide problems -->
   </bean>
   <bean id="datacore.server.cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager" 
        p:cacheManager-ref="datacore.server.ehcache"/>
   <bean id="datacore.server.ehcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" 
        p:configLocation="classpath:datacore-server-ehcache.xml"/><!-- NOT p:shared="true"
        else one ehcache conf overrides the others (plus must be named)
        see http://stackoverflow.com/questions/10013288/another-unnamed-cachemanager-already-exists-in-the-same-vm-ehcache-2-5
        and if not classpath: fails with Could not open ServletContext resource [/ehcache.xml] -->
        
   <bean name="uriService" class="org.oasis.datacore.server.uri.UriService"/><!-- override -core's -->
   
   <!-- scanning for caching & context -->
   <!-- context:component-scan base-package="org.oasis.datacore.rest.api" />
   <context:component-scan base-package="org.oasis.datacore.rest.client" / -->
   <context:component-scan base-package="org.oasis.datacore.rest.server" /><!-- old -->
   <context:component-scan base-package="org.oasis.datacore.server" /><!-- new, for now only OAuth2 and metrics -->
   <context:component-scan base-package="org.oasis.datacore.server.parsing.service.impl" />
   <context:component-scan base-package="org.oasis.datacore.model.resource" />
   <context:component-scan base-package="org.oasis.datacore.model.rest.server" />
   <context:component-scan base-package="org.oasis.datacore.rights.api.impl" />
   <context:component-scan base-package="org.oasis.datacore.historization.service.impl" />
   <context:component-scan base-package="org.oasis.datacore.contribution.service.impl" />
   <context:component-scan base-package="org.oasis.datacore.contribution.api.impl" />
   <context:component-scan base-package="org.oasis.datacore.sample" />
   <context:component-scan base-package="org.oasis.datacore.playground" /><!-- login... -->
   <context:annotation-config /><!-- actually auto enabled by previous line -->
   
   
   <!-- REST : -->
   <import resource="classpath:META-INF/cxf/cxf.xml" />
   <!-- import resource="classpath:META-INF/cxf/cxf-extension-http-jetty.xml"/ -->
   <!-- would be for test server but NO : OldSpringSupport [WARN] Import of META-INF/cxf/cxf-extension-http-jetty.xml has been deprecated and is unnecessary-->


   <!-- NB. war-less webapp deployment on Jetty could be configured here -->
   <!-- import resource="classpath:META-INF/cxf/cxf-servlet.xml" />

   <httpj:engine-factory id="cxf-engine" bus="cxf">
      <httpj:engine port="${svc.port:8180}" sendServerVersion="false">
         <httpj:threadingParameters minThreads="5" maxThreads="150" />
         <httpj:connector>
            <bean class="org.eclipse.jetty.server.bio.SocketConnector">
               <property name="port" value="${svc.port:8180}" />
            </bean>
         </httpj:connector>
         <httpj:handlers>
            <ref bean="web-server-context-static" />
            <bean class="org.eclipse.jetty.server.handler.DefaultHandler" />
         </httpj:handlers>
      </httpj:engine>
   </httpj:engine-factory>

   <bean id="webappClassPathResource" class="org.springframework.core.io.ClassPathResource">
      <constructor-arg value="/webapp"/>
   </bean>
   <bean id="webappClassPathResourceUri" factory-bean="webappClassPathResource" factory-method="getURI"/>
   <bean id="webappClassPathResourceUriString" factory-bean="webappClassPathResourceUri" factory-method="toString"/>
   <bean name="web-server-context-static" class="org.eclipse.jetty.server.handler.ContextHandler">
      <property name="contextPath" value="/swagger" />
      <property name="resourceBase" ref="webappClassPathResourceUriString"/>
      <!- property name="handler">
         <bean class="org.eclipse.jetty.server.handler.ResourceHandler">
            <property name="resourceBase" value="./" />
         </bean>
      </property ->
   </bean -->

   <!-- server CXF Bus
   All conf (features, properties, interceptors) is rather done on endpoints
   to avoid them being overriden by another Bus imported from another project or in test. 
   But if it is required, make sure it overrides the -client's if used together,
   by importing it after the client's -->
   <cxf:bus>
      <cxf:features>
         <!-- enabling CXF codahale-based metrics, for KPIs :
         (OR add all / some of its dedicated interceptors explicitly in dc endpoint) -->
      	<bean class="org.apache.cxf.metrics.MetricsFeature">
      		<constructor-arg ref="datacoreApiServer.metrics.provider"/><!-- annotation-defined -->
      	</bean>
      </cxf:features>
      <cxf:properties>
      </cxf:properties>
   </cxf:bus>
   <!-- NB. conduit conf is in *-deploy-context.xml because it must be merged
   with Datacore client-side *-rest-client-context -->
   
   
   <!-- mapper taken out to configure it (allow to inject it in ArrayServerInInterceptor, register modules) -->
   <bean id="datacoreApiServer.objectMapper" class="org.oasis.datacore.rest.api.binding.DatacoreObjectMapper"/>
   <bean id="datacoreApiServer.jacksonJsonProvider" class="com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider">
      <constructor-arg><ref bean="datacoreApiServer.objectMapper"/></constructor-arg>
   </bean>
   
   <!-- Json-ld Provider :
   server-side, using server's objectMapper -->
   <bean id="datacoreApiServer.JsonLdJavaRdfProvider" class="org.oasis.datacore.rest.api.util.JsonLdJavaRdfProvider">
      <property name="objectMapper"><ref bean="datacoreApiServer.objectMapper"/></property>
      <property name="clientSide" value="false"/>
   </bean>

   <!-- provider configuration helping supporting POST of single DCResource.
   Let Jackson accepting single value as ARRRAY. See more details in ArrayServerInInterceptor -->
   <bean factory-bean="datacoreApiServer.jacksonJsonProvider" factory-method="enable">
      <constructor-arg value="ACCEPT_SINGLE_VALUE_AS_ARRAY"/>
      <constructor-arg value="true"/><!-- NOT USED -->
   </bean>

   <!-- Spring configuration for Datacore API CXF server -->
   <jaxrs:server id="datacoreApiServer" address="${datacoreApiServer.jaxrsBaseUrl}"
         staticSubresourceResolution="true"><!-- optimization since no JAXRS annotations on impls,
         see http://cxf.apache.org/docs/jax-rs-basics.html#JAX-RSBasics-Staticresolutionofsubresources -->
      <jaxrs:serviceBeans>
         <!-- api : -->
         <ref bean="datacoreApiImpl"/>
         <ref bean="datacore.rights.apiImpl" /> 
         <ref bean="datacore.contribution.apiImpl" />
         
         <!-- other server : -->
         <ref bean="datacore.server.rootRedirectResource" />
         <ref bean="datacore.server.statusResource" />
         
         <!-- playground : -->
         <ref bean="datacore.playground.loginResource" />
         <ref bean="datacore.playground.tokenResource" />
         <ref bean="datacore.playground.configurationResource" />
         
         <!-- swagger dynamic spec server, for apidoc : -->
         <ref bean="swagger.resourceJSON" /><!--  -->
      </jaxrs:serviceBeans>
      <jaxrs:providers>
         <!-- api : -->
         <ref bean="datacoreApiServer.jacksonJsonProvider"/>
         <ref bean="datacoreApiServer.JsonLdJavaRdfProvider"/>
         <!-- to add to response error message built out of exception (ex. if WebApplicationException not thrown explicity) :
         (see http://cxf.apache.org/docs/jax-rs-basics.html#JAX-RSBasics-CustomizingdefaultWebApplicationExceptionmapper ) -->
         <!-- bean class="org.apache.cxf.jaxrs.impl.WebApplicationExceptionMapper">
            <property name="addMessageToResponse" value="true"/>
         </bean -->
         <bean class="org.oasis.datacore.rest.server.security.AccessDeniedExceptionMapper"/><!-- to HTTP 403 -->
         <bean class="org.oasis.datacore.server.rest.core.EntityExceptionMapper"/><!-- EntityException to HTTP 400 
         (rather than 500 error) when entity pb that should be thrown all the way up
         & solved at resource level, ex. when implicit only fork.
         TODO LATER OPT also for other core (DuplicateKey ?) & server (all in DatacoreApiImpl) exceptions -->
         <bean class="com.fasterxml.jackson.jaxrs.base.JsonParseExceptionMapper"/><!-- to get HTTPP 400
         (rather than 500 error) when malformed JSON, see
         http://stackoverflow.com/questions/17109405/jax-rs-exception-handling http://markmail.org/message/3bgzqq7ewgtxauh2 -->
         
         <!-- swagger dynamic spec server, for apidoc : -->
         <ref bean="swagger.resourceWriter" />
         <ref bean="swagger.apiWriter" />
      </jaxrs:providers>
      <!-- Single value array POST handling interceptors (rather than whole bus) : -->
      <jaxrs:inInterceptors>
         <bean class="org.oasis.datacore.rest.server.cxf.ArrayServerInInterceptor">
            <property name="objectMapper"><ref bean="datacoreApiServer.objectMapper"/></property>
         </bean>
         <bean class="org.oasis.datacore.rest.server.cxf.ContextServerInInterceptor"/><!-- for Datacore Request Context headers ;
         NB. others can still be accessed through RequestContext since it wraps CXF context -->
         <bean class="org.oasis.datacore.monitoring.TimeTaggerInInterceptor"/>
         <bean class="org.oasis.datacore.monitoring.ContextInInterceptor"/>
      </jaxrs:inInterceptors>
      <jaxrs:outInterceptors>
         <bean class="org.oasis.datacore.rest.server.cxf.ArrayServerOutInterceptor"/>
         <bean class="org.oasis.datacore.monitoring.TimeComputerOutInterceptor"/>
         <bean class="org.oasis.datacore.monitoring.SendEventsInterceptor"/>
      </jaxrs:outInterceptors>
      <!-- TODO also autn --><!-- bean id="authorizationFilter" class="com.bar.providers.AuthorizationRequestHandler"/ -->
      <jaxrs:features>
         <cxf:logging/>
      </jaxrs:features>
      <jaxrs:properties>
         <!-- Prevents logging WebApplicationException not HTTP 400 or 500 -->
         <entry key="org.apache.cxf.logging.FaultListener">
            <bean class="org.oasis.datacore.rest.server.cxf.ClientServerErrorFaultListener"/>
         </entry>
      </jaxrs:properties>
   </jaxrs:server>
   
</beans>
