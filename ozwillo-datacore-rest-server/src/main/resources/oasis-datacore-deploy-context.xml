<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:context="http://www.springframework.org/schema/context"
      xsi:schemaLocation=
      "http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context-3.2.xsd">

   <!-- default & overriding some properties (BEFORE import to take precedence over imported properties)
   (overriding ones are at end of comma-separated location, especially -env and -host ones)
   Lowest order takes precedence, here -1 to allow ex. to be overriden by test at -2, see
   http://stackoverflow.com/questions/11645360/overriding-properties-in-spring-3-1-with-a-local-properties-file
   However this doesn't work for -deploy*.properties, which has to be put instead in the same
   property placeholder as -server.properties instead and after it to work.
   NB. using "classpath*:" rather than "classpath" to allow not finding files (in unit tests...)
   (though not that it also means that it looks for such files in ALL jars)
   See also http://www.baeldung.com/2012/02/06/properties-with-spring/ -->
   <context:property-placeholder location="classpath:oasis-datacore-security.properties,classpath:oasis-datacore-rest-api.properties,classpath:oasis-datacore-rest-server.properties,classpath*:oasis-datacore-deploy.properties,classpath*:oasis-datacore-deploy-env-${spring.profiles.active:dev}.properties,classpath*:oasis-datacore-deploy-host-${datacore.host}.properties"
      order="-1" ignore-unresolvable="true"/><!-- so defaults to importing PropertyPlaceholder/*Resolver -->
   
   <import resource="classpath:oasis-datacore-core-context.xml" />
   
   <!-- reusing client for init of samples : -->
   <import resource="classpath:oasis-datacore-rest-client-context.xml" /><!-- MUST BE BEFORE rest-server
   else Could not autowire field: private org.oasis.datacore.rest.client.DatacoreClientApi
   org.oasis.datacore.rest.client.DatacoreApiCachedClientImpl.delegate; nested exception is
   org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean -->
   <!-- Client for AuditLog API -->
   <import resource="classpath:oasis-datacore-kernel-client-context.xml" />
   <!-- Monitoring with Riemann -->
   <import resource="classpath:oasis-datacore-monitoring-context.xml" />
   
   <import resource="classpath:oasis-datacore-security-permissions-context.xml" />
   <import resource="classpath:oasis-datacore-security-oauth2-context.xml" />
   <import resource="classpath:oasis-datacore-security-mock-context.xml" />
   <!-- Import the right security conf : (kept in different files, rather than using Spring profiles, to ease up comparison)
   NB. datacore.securitymode must be set in tomcat system options in order to be available here, because only system properties
   are available at this moment, because property files are only parsed in postProcessor.postProcessBeanFactory(beanFactory)
   but DefaultBeanDefinitionDocumentReader.parseDefaultElement() for import resolves placeholder at parse time in importBeanDefinitionResource()
   -->
   <import resource="classpath:oasis-datacore-security-web${datacore.securitymode:-devmode}-context.xml" />
   <import resource="classpath:oasis-datacore-rest-server-context.xml" />
   <import resource="classpath:oasis-datacore-swagger-context.xml" />
   
</beans>
