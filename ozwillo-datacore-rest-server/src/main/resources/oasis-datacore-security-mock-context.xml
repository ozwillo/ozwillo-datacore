<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="
      http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/security
      http://www.springframework.org/schema/security/spring-security.xsd">

	<!-- security:http pattern="/dc/**" authentication-manager-ref="authenticationManager"><!- entry-point-ref="clientAuthenticationEntryPoint" ->
	  <security:intercept-url pattern="/dc/model/**" access="ROLE_ADMIN" /><!- TODO for model admin ->
	  <security:custom-filter ref="authenticationFilter" before="PRE_AUTH_FILTER" /><!- ref="oauth2ProviderFilter" ->
     <!- NB.  In Spring Security, the responsibility for storing the SecurityContext between requests
     falls to the SecurityContextPersistenceFilter, which by default stores the context as an HttpSession
     attribute between HTTP requests
     http://docs.spring.io/spring-security/site/docs/3.0.x/reference/technical-overview.html
     ->
	  <security:access-denied-handler error-page="404"/><!- ref="oauthAccessDeniedHandler"
     see http://www.mkyong.com/spring-security/customize-http-403-access-denied-page-in-spring-security/ ->
	</security:http>
   
   <bean id="authenticationFilter"
       class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
     <property name="authenticationManager" ref="org.springframework.security.authenticationManager"/>
     <!- property name="filterProcessesUrl" value="/j_spring_security_check"/ ->
   </bean -->
	
	
	<!-- BASIC auth filter, on top of mock hardcoded user store : -->
	<bean id="basicAuthenticationFilter" class="org.springframework.security.web.authentication.www.BasicAuthenticationFilter">
		<constructor-arg  name="authenticationManager" ref="datacore.AuthenticationManager" />
	    <constructor-arg  name="authenticationEntryPoint" ref="authenticationEntryPoint" />
	</bean>

	<bean id="authenticationEntryPoint" class="org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint">
    	<property name="realmName" value="datacore" />
	</bean>

	<security:authentication-manager id="datacore.AuthenticationManager" erase-credentials="false"><!-- i.e. id="org.springframework.security.authenticationManager" -->
	  <security:authentication-provider ref="proxyDaoAuthenticationProvider" /><!-- clientDetailsUserService -->
	</security:authentication-manager>
	
	<bean id="proxyDaoAuthenticationProvider" class="org.oasis.datacore.core.security.providers.ProxyDaoAuthenticationProvider">
		<property name="userDetailsService" ref="datacore.localUserDetailsService" />
	</bean>
   
   <!-- locally-defined users : -->
   <!-- (NB. outside localauthdevmode, only logged in from LocalAuthenticationService so password are useless) -->
   <security:user-service id="datacore.localUserDetailsService" properties="classpath:users-mock.properties" />

</beans>